=begin
#Verbit Transcribe (v0.8 tech preview)

#Verbit API (application programming interface) version 1 provides programmatic access to Verbit's                     premium end-to-end transcription and captioning solution. It is based on state of the art                     ASR (automatic speech recognition) engine and thorough human review. The API can easily be                     integrated into customers' systems, enriching the user experience with transcriptions and                     closed captions for video and audio.<br><br>                     All actual schemas you can download by this link https://platform.verbit.co/api/v1/schemas/schema_name.json<br/><br/>                     <b>Testing API integration</b> can be done via sandbox token (also found on customer page) and using sandbox API url                     (https://sandbox-api.verbit.co). When using the sandbox, no real ASR or human editing is performed, and there                     are several additional params available to imitate different states of API. Please see \"Create new job\" section below.

The version of the OpenAPI document: v0.8 tech preview

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.4.0

=end

require 'cgi'

module OpenapiClient
  class AuthenticationApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # requests JWT for authentication
    # Please use this endpoint to start working with the API. To start, you need to get the customer API key from your account page. With this request, you will get JWT which you need to use for all consequent requests. This token has an expiration of 1 hour.<br><br>Please put it in the header. <code>Authorization: Bearer &#10094;received JWT&#10095;</code><br><br><b>Request Schema Name:</b> auth_request
    # @param inline_object [InlineObject] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_tracing_id Tracing ID, should be unique in every request, sent back to the client
    # @option opts [Time] :x_request_timestamp The timestamp of the request (ISO8901, UTC TZ). When not sent, will be automatically set to server request time.
    # @return [InlineResponse200]
    def auth(inline_object, opts = {})
      data, _status_code, _headers = auth_with_http_info(inline_object, opts)
      data
    end

    # requests JWT for authentication
    # Please use this endpoint to start working with the API. To start, you need to get the customer API key from your account page. With this request, you will get JWT which you need to use for all consequent requests. This token has an expiration of 1 hour.&lt;br&gt;&lt;br&gt;Please put it in the header. &lt;code&gt;Authorization: Bearer &amp;#10094;received JWT&amp;#10095;&lt;/code&gt;&lt;br&gt;&lt;br&gt;&lt;b&gt;Request Schema Name:&lt;/b&gt; auth_request
    # @param inline_object [InlineObject] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_tracing_id Tracing ID, should be unique in every request, sent back to the client
    # @option opts [Time] :x_request_timestamp The timestamp of the request (ISO8901, UTC TZ). When not sent, will be automatically set to server request time.
    # @return [Array<(InlineResponse200, Integer, Hash)>] InlineResponse200 data, response status code and response headers
    def auth_with_http_info(inline_object, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AuthenticationApi.auth ...'
      end
      # verify the required parameter 'inline_object' is set
      if @api_client.config.client_side_validation && inline_object.nil?
        fail ArgumentError, "Missing the required parameter 'inline_object' when calling AuthenticationApi.auth"
      end
      # resource path
      local_var_path = '/auth'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'X-Tracing-ID'] = opts[:'x_tracing_id'] if !opts[:'x_tracing_id'].nil?
      header_params[:'X-Request-Timestamp'] = opts[:'x_request_timestamp'] if !opts[:'x_request_timestamp'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(inline_object)

      # return_type
      return_type = opts[:debug_return_type] || 'InlineResponse200'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"AuthenticationApi.auth",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AuthenticationApi#auth\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
