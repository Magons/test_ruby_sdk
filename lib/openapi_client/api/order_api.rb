=begin
#Verbit Transcribe (v0.8 tech preview)

#Verbit API (application programming interface) version 1 provides programmatic access to Verbit's                     premium end-to-end transcription and captioning solution. It is based on state of the art                     ASR (automatic speech recognition) engine and thorough human review. The API can easily be                     integrated into customers' systems, enriching the user experience with transcriptions and                     closed captions for video and audio.<br><br>                     All actual schemas you can download by this link https://platform.verbit.co/api/v1/schemas/schema_name.json<br/><br/>                     <b>Testing API integration</b> can be done via sandbox token (also found on customer page) and using sandbox API url                     (https://sandbox-api.verbit.co). When using the sandbox, no real ASR or human editing is performed, and there                     are several additional params available to imitate different states of API. Please see \"Create new job\" section below.

The version of the OpenAPI document: v0.8 tech preview

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.4.0

=end

require 'cgi'

module OpenapiClient
  class OrderApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Cancels an order
    # @param id [String] Unique id of the transcription order
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_tracing_id Tracing ID, should be unique in every request, sent back to the client
    # @option opts [Time] :x_request_timestamp The timestamp of the request (ISO8901, UTC TZ). When not sent, will be automatically set to server request time.
    # @return [InlineResponse2002]
    def orders_id_cancel_post(id, opts = {})
      data, _status_code, _headers = orders_id_cancel_post_with_http_info(id, opts)
      data
    end

    # Cancels an order
    # @param id [String] Unique id of the transcription order
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_tracing_id Tracing ID, should be unique in every request, sent back to the client
    # @option opts [Time] :x_request_timestamp The timestamp of the request (ISO8901, UTC TZ). When not sent, will be automatically set to server request time.
    # @return [Array<(InlineResponse2002, Integer, Hash)>] InlineResponse2002 data, response status code and response headers
    def orders_id_cancel_post_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrderApi.orders_id_cancel_post ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling OrderApi.orders_id_cancel_post"
      end
      # resource path
      local_var_path = '/orders/{id}/cancel'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'X-Tracing-ID'] = opts[:'x_tracing_id'] if !opts[:'x_tracing_id'].nil?
      header_params[:'X-Request-Timestamp'] = opts[:'x_request_timestamp'] if !opts[:'x_request_timestamp'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'InlineResponse2002'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['BearerAuth']

      new_options = opts.merge(
        :operation => :"OrderApi.orders_id_cancel_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrderApi#orders_id_cancel_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Gets an order information
    # @param id [String] Unique id of the transcription order
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_tracing_id Tracing ID, should be unique in every request, sent back to the client
    # @option opts [Time] :x_request_timestamp The timestamp of the request (ISO8901, UTC TZ). When not sent, will be automatically set to server request time.
    # @return [InlineResponse2002]
    def orders_id_get(id, opts = {})
      data, _status_code, _headers = orders_id_get_with_http_info(id, opts)
      data
    end

    # Gets an order information
    # @param id [String] Unique id of the transcription order
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_tracing_id Tracing ID, should be unique in every request, sent back to the client
    # @option opts [Time] :x_request_timestamp The timestamp of the request (ISO8901, UTC TZ). When not sent, will be automatically set to server request time.
    # @return [Array<(InlineResponse2002, Integer, Hash)>] InlineResponse2002 data, response status code and response headers
    def orders_id_get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrderApi.orders_id_get ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling OrderApi.orders_id_get"
      end
      # resource path
      local_var_path = '/orders/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'X-Tracing-ID'] = opts[:'x_tracing_id'] if !opts[:'x_tracing_id'].nil?
      header_params[:'X-Request-Timestamp'] = opts[:'x_request_timestamp'] if !opts[:'x_request_timestamp'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'InlineResponse2002'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['BearerAuth']

      new_options = opts.merge(
        :operation => :"OrderApi.orders_id_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrderApi#orders_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Creates an order
    # <b>Request Schema Name:</b> create_order_request
    # @param inline_object1 [InlineObject1] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_tracing_id Tracing ID, should be unique in every request, sent back to the client
    # @option opts [Time] :x_request_timestamp The timestamp of the request (ISO8901, UTC TZ). When not sent, will be automatically set to server request time.
    # @return [InlineResponse2001]
    def orders_post(inline_object1, opts = {})
      data, _status_code, _headers = orders_post_with_http_info(inline_object1, opts)
      data
    end

    # Creates an order
    # &lt;b&gt;Request Schema Name:&lt;/b&gt; create_order_request
    # @param inline_object1 [InlineObject1] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_tracing_id Tracing ID, should be unique in every request, sent back to the client
    # @option opts [Time] :x_request_timestamp The timestamp of the request (ISO8901, UTC TZ). When not sent, will be automatically set to server request time.
    # @return [Array<(InlineResponse2001, Integer, Hash)>] InlineResponse2001 data, response status code and response headers
    def orders_post_with_http_info(inline_object1, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrderApi.orders_post ...'
      end
      # verify the required parameter 'inline_object1' is set
      if @api_client.config.client_side_validation && inline_object1.nil?
        fail ArgumentError, "Missing the required parameter 'inline_object1' when calling OrderApi.orders_post"
      end
      # resource path
      local_var_path = '/orders'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'X-Tracing-ID'] = opts[:'x_tracing_id'] if !opts[:'x_tracing_id'].nil?
      header_params[:'X-Request-Timestamp'] = opts[:'x_request_timestamp'] if !opts[:'x_request_timestamp'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(inline_object1)

      # return_type
      return_type = opts[:debug_return_type] || 'InlineResponse2001'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['BearerAuth']

      new_options = opts.merge(
        :operation => :"OrderApi.orders_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrderApi#orders_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
